---
title: "Homework 0"
date: "2023-12-26"
image: penguin.jpg
categories: [Homework]
draft: true
---

In this blog post assignment, you’ll create a short post for your new website. The primary purpose is to give you some practice working with Quarto blogging with Python code.

Make sure to check the “Specifications” section at the bottom of this assignment for an explicit list of criteria that your blog post must meet in order to receive credit.

# Instructions

To complete this homework assignment, you’ll need to have completed installations of Anaconda, GitHub Desktop, and Quarto as described in the instruction in BruinLearn.

## 1. Complete the Hello, Quarto activity
Your first step should be to complete the [Hello Quarto](../quarto) activity to help you get familiar with blogging with Quarto. If you already completed this activity in Discussion, then you can skip to the next step.

If you haven’t done so already, now is a good time to modify your site. Look around the site’s files and see if you can figure out how to modify the `About` page and the blog’s title from `about.qmd` and `_quarto.yml`.

See these pages for help: [about page](https://quarto.org/docs/websites/website-about.html), [config options](https://quarto.org/docs/reference/projects/websites.html).

If you are comfortable with `css`, then you can directly modify `style.css` and other files in the repo.

All this is optional, and it’s not necessary to put your real name or real photo anywhere on the site.

## 2. Create a post
Create a simple blog post, using the instructions and demonstrations [here](../composing/). Here is the prompt for your post:

> Write a tutorial explaining how to construct an interesting data visualization of the [Palmer Penguins](https://github.com/allisonhorst/palmerpenguins) data set.

You can read the data into Python by running:

```python
import pandas as pd
url = "https://raw.githubusercontent.com/PhilChodrow/PIC16B/master/datasets/palmer_penguins.csv"
penguins = pd.read_csv(url)
```

Your visualization does not have to be complex or fancy, but it should be highly readable and appropriately labeled.

Your post should include the image directly under the code that generates it, as demonstrated [here](../composing).

There will be __two Gradescope assignments__ open for submission, one for __PDF__, and the other for __code portion (as a programming assignment)__. You have to submit __both__ of them for your homework to be graded. 

- For the PDF assingment, please submit your newly-created blog page printed as PDF.
  - The file should show the URL to your blog.
- For the programming assignment, please submit __any code file you wrote for your homework__. All the `.py` file, `.ipynb` file, or `.qmd` files all included. The grader should be able to reproduce your result from the code portion you submitted. 

### Hint
The easiest way to create a post like this is to solve the problem in a Jupyter Notebook or Python script first, and then transfer the results over to your blog.

# Specifications
## Format
0. __You have to submit the PDF-printed version of your Quarto blog__. The file should show the URL to your published blog. Anything else will receive "In Progress" grade at best, incuding:
  - Jupyter notebook or JupyterLab screen printed 
  - HTML-converted Jupyter notebook printed
  - PDF-converted Jupyter notebook or JupyterLab
  - PDF generated directly from Quarto
0. You have to submit code necessary to reproduce your results.

## Coding Problem
1. The plot is readable and contains axis labels, a title, and a legend if appropriate.

## Style and Documentation
2. Repeated operations should be enclosed in functions.
3. For-loops are minimized by making full use of vectorized operations for Numpy arrays and Pandas data frames.
4. Helpful comments are supplied throughout the code. Docstrings are supplied for any functions and classes you define.

## Writing
5. The overall post is written in engaging and unambiguous English prose. There is written explanation throughout the post, such that a PIC16A student could learn to perform the demonstrated tasks by reading the post.
6. Each block of code has a clearly-explained purpose.
7. The post is organized into clearly delimited sections using markdown headers (`#`), making it easier for the reader to navigate.
